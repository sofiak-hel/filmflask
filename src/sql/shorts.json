{
    "get_schema_version": "select version from schema_version",
    "create_user": "insert into users (handle, nickname, password_hash) values (:handle, :nickname, :password_hash)",
    "find_user": "select * from users where user_id = :user_id",
    "find_user_handle": "select * from users where handle = :handle",
    "update_user": "update users set nickname=:nickname, bio=:bio, avatar_id=:avatar_id where user_id=:user_id",
    "update_user_password": "update users set password_hash=:password_hash where user_id=:user_id",
    "create_session": "insert into sessions (user_id) values (:user_id) returning session_id",
    "find_session": "select session_id from sessions where session_id = :session_id and expiration > now()",
    "find_session_and_user": "select * from sessions s left join users u on u.user_id = s.user_id where session_id = :session_id and expiration > now()",
    "clear_old_sessions": "delete from sessions where expiration <= now()",
    "refresh_session": "update sessions set expiration = now() + '2 hours' where session_id = :session_id",
    "delete_session": "delete from sessions where session_id = :session_id",
    "create_image": "insert into images (content_type, blob) values(:content_type, :blob) returning image_id",
    "get_image": "select * from images where image_id = :image_id",
    "delete_image": "delete from images where image_id = :image_id",
    "create_video": "insert into videos (user_id, blob, content_type, title, description, thumbnail_id) values (:user_id, :blob, :content_type, :title, :description, :thumbnail_id) returning video_id",
    "get_video_and_uploader": "select * from videos v left join users u on u.user_id = v.user_id where video_id = :video_id",
    "all_videos": "select video_id, u.user_id as user_id, content_type, title, description, thumbnail_id, upload_time, download_counter, role_id, handle, nickname, password_hash, bio, avatar_id, deleted from videos v left join users u on u.user_id = v.user_id order by v.upload_time desc",
    "search_videos": "select video_id, u.user_id as user_id, content_type, title, description, thumbnail_id, upload_time, download_counter, role_id, handle, nickname, password_hash, bio, avatar_id, deleted from videos v left join users u on u.user_id = v.user_id where video_search_en @@ to_tsquery(:search) or video_search_fi @@ to_tsquery(:search)",
    "search_videos_substr": "select video_id, u.user_id as user_id, content_type, title, description, thumbnail_id, upload_time, download_counter, role_id, handle, nickname, password_hash, bio, avatar_id, deleted from videos v left join users u on u.user_id = v.user_id where lower(v.title) || ' ' || lower(v.description) || ' ' || lower(u.nickname) || ' ' || lower(u.handle) like :search",
    "get_videos_by_uploader": "select video_id, u.user_id as user_id, content_type, title, description, thumbnail_id, upload_time, download_counter, role_id, handle, nickname, password_hash, bio, avatar_id, deleted from videos v left join users u on u.user_id = v.user_id where u.user_id in :user_ids order by v.upload_time desc",
    "inc_video_counter": "update videos set download_counter = download_counter + 1 where video_id = :video_id",
    "create_csrf_token": "insert into csrf_tokens (session_id) values (:session_id) returning *",
    "clear_csrf_tokens": "delete from csrf_tokens where expiration <= now()",
    "get_csrf_token": "select * from csrf_tokens where csrf_token = :csrf_token and expiration > now()",
    "reupload_video": "update videos set blob = :blob where video_id = :video_id",
    "subscribe": "insert into subscriptions (user_id, subscribed_id) values (:user_id, :subscribed_id)",
    "check_subscription": "select * from subscriptions where user_id = :user_id and subscribed_id = :subscribed_id",
    "unsubscribe": "delete from subscriptions where user_id = :user_id and subscribed_id = :subscribed_id",
    "list_subscriptions": "select subscribed_id from subscriptions where user_id = :user_id",
    "get_subbox": "select video_id, u.user_id as user_id, content_type, title, description, thumbnail_id, upload_time, download_counter, role_id, handle, nickname, password_hash, bio, avatar_id, deleted from subscriptions s left join users u on s.subscribed_id = u.user_id left join videos v on u.user_id = v.user_id where s.user_id = :user_id order by v.upload_time desc",
    "get_subscribers": "select user_id from subscriptions where subscribed_id = :user_id",
    "add_comment": "insert into comments (video_id, user_id, content) values (:video_id, :user_id, :content) returning comment_id",
    "get_comments": "select * from comments c left join users u on c.user_id = u.user_id where video_id = :video_id order by timestamp desc",
    "delete_comment_safe": "delete from comments where comment_id = :comment_id and user_id = :user_id returning video_id",
    "rate_video": "insert into video_ratings (video_id, user_id, rating) values (:video_id, :user_id, :rating) on conflict (video_id, user_id) do update set rating = :rating",
    "delete_rating": "delete from video_ratings where video_id = :video_id and user_id = :user_id",
    "get_ratings": "select rating from video_ratings where video_id = :video_id",
    "get_rating": "select rating from video_ratings where user_id = :user_id and video_id = :video_id"
}